{"version":3,"sources":["webpack://lib_diff_test/inert.ts","webpack://lib_diff_test/./node_modules/wicg-inert/dist/inert.js"],"names":["global","factory","exports","module","define","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","slice","Array","matches","Element","msMatchesSelector","_focusableElementsString","join","InertRoot","rootElement","inertManager","_inertManager","_rootElement","_managedNodes","Set","hasAttribute","_savedAriaHidden","getAttribute","setAttribute","_makeSubtreeUnfocusable","_observer","MutationObserver","_onMutation","bind","observe","attributes","childList","subtree","value","destructor","disconnect","removeAttribute","forEach","inertNode","_unmanageNode","node","startNode","_this2","composedTreeWalk","_visitNode","activeElement","document","body","contains","root","undefined","nodeType","Node","DOCUMENT_FRAGMENT_NODE","parentNode","blur","focus","ELEMENT_NODE","element","_adoptInertRoot","call","_manageNode","register","add","deregister","_unmanageSubtree","_this3","inertSubroot","getInertRoot","setInert","managedNodes","savedInertNode","records","self","record","type","addedNodes","removedNodes","attributeName","managedNode","get","set","ariaHidden","InertNode","inertRoot","_node","_overrodeFocusMethod","_inertRoots","_savedTabIndex","_destroyed","ensureUntabbable","_throwIfDestroyed","destroyed","Error","tabIndex","hasSavedTabIndex","addInertRoot","removeInertRoot","size","InertManager","_document","Map","_watchForInert","addInertStyle","head","documentElement","readyState","addEventListener","_onDocumentLoaded","inert","has","parent","_inertRoot","inertElements","querySelectorAll","inertElement","_this","unshift","callback","shadowRootAncestor","shadowRoot","localName","content","distributedNodes","getDistributedNodes","slot","_distributedNodes","assignedNodes","flatten","_i","child","firstChild","nextSibling","querySelector","style","createElement","textContent","appendChild","hasOwnProperty"],"mappings":"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","file":"runtime/inert.773f2db1476af40af9da.bundle.js","sourcesContent":["`!has('build-elide')`;\nrequire('wicg-inert/dist/inert');\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory() :\n  typeof define === 'function' && define.amd ? define('inert', factory) :\n  (factory());\n}(this, (function () { 'use strict';\n\n  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  /**\n   * This work is licensed under the W3C Software and Document License\n   * (http://www.w3.org/Consortium/Legal/2015/copyright-software-and-document).\n   */\n\n  // Convenience function for converting NodeLists.\n  /** @type {typeof Array.prototype.slice} */\n  var slice = Array.prototype.slice;\n\n  /**\n   * IE has a non-standard name for \"matches\".\n   * @type {typeof Element.prototype.matches}\n   */\n  var matches = Element.prototype.matches || Element.prototype.msMatchesSelector;\n\n  /** @type {string} */\n  var _focusableElementsString = ['a[href]', 'area[href]', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'iframe', 'object', 'embed', '[contenteditable]'].join(',');\n\n  /**\n   * `InertRoot` manages a single inert subtree, i.e. a DOM subtree whose root element has an `inert`\n   * attribute.\n   *\n   * Its main functions are:\n   *\n   * - to create and maintain a set of managed `InertNode`s, including when mutations occur in the\n   *   subtree. The `makeSubtreeUnfocusable()` method handles collecting `InertNode`s via registering\n   *   each focusable node in the subtree with the singleton `InertManager` which manages all known\n   *   focusable nodes within inert subtrees. `InertManager` ensures that a single `InertNode`\n   *   instance exists for each focusable node which has at least one inert root as an ancestor.\n   *\n   * - to notify all managed `InertNode`s when this subtree stops being inert (i.e. when the `inert`\n   *   attribute is removed from the root node). This is handled in the destructor, which calls the\n   *   `deregister` method on `InertManager` for each managed inert node.\n   */\n\n  var InertRoot = function () {\n    /**\n     * @param {!Element} rootElement The Element at the root of the inert subtree.\n     * @param {!InertManager} inertManager The global singleton InertManager object.\n     */\n    function InertRoot(rootElement, inertManager) {\n      _classCallCheck(this, InertRoot);\n\n      /** @type {!InertManager} */\n      this._inertManager = inertManager;\n\n      /** @type {!Element} */\n      this._rootElement = rootElement;\n\n      /**\n       * @type {!Set<!InertNode>}\n       * All managed focusable nodes in this InertRoot's subtree.\n       */\n      this._managedNodes = new Set();\n\n      // Make the subtree hidden from assistive technology\n      if (this._rootElement.hasAttribute('aria-hidden')) {\n        /** @type {?string} */\n        this._savedAriaHidden = this._rootElement.getAttribute('aria-hidden');\n      } else {\n        this._savedAriaHidden = null;\n      }\n      this._rootElement.setAttribute('aria-hidden', 'true');\n\n      // Make all focusable elements in the subtree unfocusable and add them to _managedNodes\n      this._makeSubtreeUnfocusable(this._rootElement);\n\n      // Watch for:\n      // - any additions in the subtree: make them unfocusable too\n      // - any removals from the subtree: remove them from this inert root's managed nodes\n      // - attribute changes: if `tabindex` is added, or removed from an intrinsically focusable\n      //   element, make that node a managed node.\n      this._observer = new MutationObserver(this._onMutation.bind(this));\n      this._observer.observe(this._rootElement, { attributes: true, childList: true, subtree: true });\n    }\n\n    /**\n     * Call this whenever this object is about to become obsolete.  This unwinds all of the state\n     * stored in this object and updates the state of all of the managed nodes.\n     */\n\n\n    _createClass(InertRoot, [{\n      key: 'destructor',\n      value: function destructor() {\n        this._observer.disconnect();\n\n        if (this._rootElement) {\n          if (this._savedAriaHidden !== null) {\n            this._rootElement.setAttribute('aria-hidden', this._savedAriaHidden);\n          } else {\n            this._rootElement.removeAttribute('aria-hidden');\n          }\n        }\n\n        this._managedNodes.forEach(function (inertNode) {\n          this._unmanageNode(inertNode.node);\n        }, this);\n\n        // Note we cast the nulls to the ANY type here because:\n        // 1) We want the class properties to be declared as non-null, or else we\n        //    need even more casts throughout this code. All bets are off if an\n        //    instance has been destroyed and a method is called.\n        // 2) We don't want to cast \"this\", because we want type-aware optimizations\n        //    to know which properties we're setting.\n        this._observer = /** @type {?} */null;\n        this._rootElement = /** @type {?} */null;\n        this._managedNodes = /** @type {?} */null;\n        this._inertManager = /** @type {?} */null;\n      }\n\n      /**\n       * @return {!Set<!InertNode>} A copy of this InertRoot's managed nodes set.\n       */\n\n    }, {\n      key: '_makeSubtreeUnfocusable',\n\n\n      /**\n       * @param {!Node} startNode\n       */\n      value: function _makeSubtreeUnfocusable(startNode) {\n        var _this2 = this;\n\n        composedTreeWalk(startNode, function (node) {\n          return _this2._visitNode(node);\n        });\n\n        var activeElement = document.activeElement;\n\n        if (!document.body.contains(startNode)) {\n          // startNode may be in shadow DOM, so find its nearest shadowRoot to get the activeElement.\n          var node = startNode;\n          /** @type {!ShadowRoot|undefined} */\n          var root = undefined;\n          while (node) {\n            if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n              root = /** @type {!ShadowRoot} */node;\n              break;\n            }\n            node = node.parentNode;\n          }\n          if (root) {\n            activeElement = root.activeElement;\n          }\n        }\n        if (startNode.contains(activeElement)) {\n          activeElement.blur();\n          // In IE11, if an element is already focused, and then set to tabindex=-1\n          // calling blur() will not actually move the focus.\n          // To work around this we call focus() on the body instead.\n          if (activeElement === document.activeElement) {\n            document.body.focus();\n          }\n        }\n      }\n\n      /**\n       * @param {!Node} node\n       */\n\n    }, {\n      key: '_visitNode',\n      value: function _visitNode(node) {\n        if (node.nodeType !== Node.ELEMENT_NODE) {\n          return;\n        }\n        var element = /** @type {!Element} */node;\n\n        // If a descendant inert root becomes un-inert, its descendants will still be inert because of\n        // this inert root, so all of its managed nodes need to be adopted by this InertRoot.\n        if (element !== this._rootElement && element.hasAttribute('inert')) {\n          this._adoptInertRoot(element);\n        }\n\n        if (matches.call(element, _focusableElementsString) || element.hasAttribute('tabindex')) {\n          this._manageNode(element);\n        }\n      }\n\n      /**\n       * Register the given node with this InertRoot and with InertManager.\n       * @param {!Node} node\n       */\n\n    }, {\n      key: '_manageNode',\n      value: function _manageNode(node) {\n        var inertNode = this._inertManager.register(node, this);\n        this._managedNodes.add(inertNode);\n      }\n\n      /**\n       * Unregister the given node with this InertRoot and with InertManager.\n       * @param {!Node} node\n       */\n\n    }, {\n      key: '_unmanageNode',\n      value: function _unmanageNode(node) {\n        var inertNode = this._inertManager.deregister(node, this);\n        if (inertNode) {\n          this._managedNodes['delete'](inertNode);\n        }\n      }\n\n      /**\n       * Unregister the entire subtree starting at `startNode`.\n       * @param {!Node} startNode\n       */\n\n    }, {\n      key: '_unmanageSubtree',\n      value: function _unmanageSubtree(startNode) {\n        var _this3 = this;\n\n        composedTreeWalk(startNode, function (node) {\n          return _this3._unmanageNode(node);\n        });\n      }\n\n      /**\n       * If a descendant node is found with an `inert` attribute, adopt its managed nodes.\n       * @param {!Element} node\n       */\n\n    }, {\n      key: '_adoptInertRoot',\n      value: function _adoptInertRoot(node) {\n        var inertSubroot = this._inertManager.getInertRoot(node);\n\n        // During initialisation this inert root may not have been registered yet,\n        // so register it now if need be.\n        if (!inertSubroot) {\n          this._inertManager.setInert(node, true);\n          inertSubroot = this._inertManager.getInertRoot(node);\n        }\n\n        inertSubroot.managedNodes.forEach(function (savedInertNode) {\n          this._manageNode(savedInertNode.node);\n        }, this);\n      }\n\n      /**\n       * Callback used when mutation observer detects subtree additions, removals, or attribute changes.\n       * @param {!Array<!MutationRecord>} records\n       * @param {!MutationObserver} self\n       */\n\n    }, {\n      key: '_onMutation',\n      value: function _onMutation(records, self) {\n        records.forEach(function (record) {\n          var target = /** @type {!Element} */record.target;\n          if (record.type === 'childList') {\n            // Manage added nodes\n            slice.call(record.addedNodes).forEach(function (node) {\n              this._makeSubtreeUnfocusable(node);\n            }, this);\n\n            // Un-manage removed nodes\n            slice.call(record.removedNodes).forEach(function (node) {\n              this._unmanageSubtree(node);\n            }, this);\n          } else if (record.type === 'attributes') {\n            if (record.attributeName === 'tabindex') {\n              // Re-initialise inert node if tabindex changes\n              this._manageNode(target);\n            } else if (target !== this._rootElement && record.attributeName === 'inert' && target.hasAttribute('inert')) {\n              // If a new inert root is added, adopt its managed nodes and make sure it knows about the\n              // already managed nodes from this inert subroot.\n              this._adoptInertRoot(target);\n              var inertSubroot = this._inertManager.getInertRoot(target);\n              this._managedNodes.forEach(function (managedNode) {\n                if (target.contains(managedNode.node)) {\n                  inertSubroot._manageNode(managedNode.node);\n                }\n              });\n            }\n          }\n        }, this);\n      }\n    }, {\n      key: 'managedNodes',\n      get: function get() {\n        return new Set(this._managedNodes);\n      }\n\n      /** @return {boolean} */\n\n    }, {\n      key: 'hasSavedAriaHidden',\n      get: function get() {\n        return this._savedAriaHidden !== null;\n      }\n\n      /** @param {?string} ariaHidden */\n\n    }, {\n      key: 'savedAriaHidden',\n      set: function set(ariaHidden) {\n        this._savedAriaHidden = ariaHidden;\n      }\n\n      /** @return {?string} */\n      ,\n      get: function get() {\n        return this._savedAriaHidden;\n      }\n    }]);\n\n    return InertRoot;\n  }();\n\n  /**\n   * `InertNode` initialises and manages a single inert node.\n   * A node is inert if it is a descendant of one or more inert root elements.\n   *\n   * On construction, `InertNode` saves the existing `tabindex` value for the node, if any, and\n   * either removes the `tabindex` attribute or sets it to `-1`, depending on whether the element\n   * is intrinsically focusable or not.\n   *\n   * `InertNode` maintains a set of `InertRoot`s which are descendants of this `InertNode`. When an\n   * `InertRoot` is destroyed, and calls `InertManager.deregister()`, the `InertManager` notifies the\n   * `InertNode` via `removeInertRoot()`, which in turn destroys the `InertNode` if no `InertRoot`s\n   * remain in the set. On destruction, `InertNode` reinstates the stored `tabindex` if one exists,\n   * or removes the `tabindex` attribute if the element is intrinsically focusable.\n   */\n\n\n  var InertNode = function () {\n    /**\n     * @param {!Node} node A focusable element to be made inert.\n     * @param {!InertRoot} inertRoot The inert root element associated with this inert node.\n     */\n    function InertNode(node, inertRoot) {\n      _classCallCheck(this, InertNode);\n\n      /** @type {!Node} */\n      this._node = node;\n\n      /** @type {boolean} */\n      this._overrodeFocusMethod = false;\n\n      /**\n       * @type {!Set<!InertRoot>} The set of descendant inert roots.\n       *    If and only if this set becomes empty, this node is no longer inert.\n       */\n      this._inertRoots = new Set([inertRoot]);\n\n      /** @type {?number} */\n      this._savedTabIndex = null;\n\n      /** @type {boolean} */\n      this._destroyed = false;\n\n      // Save any prior tabindex info and make this node untabbable\n      this.ensureUntabbable();\n    }\n\n    /**\n     * Call this whenever this object is about to become obsolete.\n     * This makes the managed node focusable again and deletes all of the previously stored state.\n     */\n\n\n    _createClass(InertNode, [{\n      key: 'destructor',\n      value: function destructor() {\n        this._throwIfDestroyed();\n\n        if (this._node && this._node.nodeType === Node.ELEMENT_NODE) {\n          var element = /** @type {!Element} */this._node;\n          if (this._savedTabIndex !== null) {\n            element.setAttribute('tabindex', this._savedTabIndex);\n          } else {\n            element.removeAttribute('tabindex');\n          }\n\n          // Use `delete` to restore native focus method.\n          if (this._overrodeFocusMethod) {\n            delete element.focus;\n          }\n        }\n\n        // See note in InertRoot.destructor for why we cast these nulls to ANY.\n        this._node = /** @type {?} */null;\n        this._inertRoots = /** @type {?} */null;\n        this._destroyed = true;\n      }\n\n      /**\n       * @type {boolean} Whether this object is obsolete because the managed node is no longer inert.\n       * If the object has been destroyed, any attempt to access it will cause an exception.\n       */\n\n    }, {\n      key: '_throwIfDestroyed',\n\n\n      /**\n       * Throw if user tries to access destroyed InertNode.\n       */\n      value: function _throwIfDestroyed() {\n        if (this.destroyed) {\n          throw new Error('Trying to access destroyed InertNode');\n        }\n      }\n\n      /** @return {boolean} */\n\n    }, {\n      key: 'ensureUntabbable',\n\n\n      /** Save the existing tabindex value and make the node untabbable and unfocusable */\n      value: function ensureUntabbable() {\n        if (this.node.nodeType !== Node.ELEMENT_NODE) {\n          return;\n        }\n        var element = /** @type {!Element} */this.node;\n        if (matches.call(element, _focusableElementsString)) {\n          if ( /** @type {!HTMLElement} */element.tabIndex === -1 && this.hasSavedTabIndex) {\n            return;\n          }\n\n          if (element.hasAttribute('tabindex')) {\n            this._savedTabIndex = /** @type {!HTMLElement} */element.tabIndex;\n          }\n          element.setAttribute('tabindex', '-1');\n          if (element.nodeType === Node.ELEMENT_NODE) {\n            element.focus = function () {};\n            this._overrodeFocusMethod = true;\n          }\n        } else if (element.hasAttribute('tabindex')) {\n          this._savedTabIndex = /** @type {!HTMLElement} */element.tabIndex;\n          element.removeAttribute('tabindex');\n        }\n      }\n\n      /**\n       * Add another inert root to this inert node's set of managing inert roots.\n       * @param {!InertRoot} inertRoot\n       */\n\n    }, {\n      key: 'addInertRoot',\n      value: function addInertRoot(inertRoot) {\n        this._throwIfDestroyed();\n        this._inertRoots.add(inertRoot);\n      }\n\n      /**\n       * Remove the given inert root from this inert node's set of managing inert roots.\n       * If the set of managing inert roots becomes empty, this node is no longer inert,\n       * so the object should be destroyed.\n       * @param {!InertRoot} inertRoot\n       */\n\n    }, {\n      key: 'removeInertRoot',\n      value: function removeInertRoot(inertRoot) {\n        this._throwIfDestroyed();\n        this._inertRoots['delete'](inertRoot);\n        if (this._inertRoots.size === 0) {\n          this.destructor();\n        }\n      }\n    }, {\n      key: 'destroyed',\n      get: function get() {\n        return (/** @type {!InertNode} */this._destroyed\n        );\n      }\n    }, {\n      key: 'hasSavedTabIndex',\n      get: function get() {\n        return this._savedTabIndex !== null;\n      }\n\n      /** @return {!Node} */\n\n    }, {\n      key: 'node',\n      get: function get() {\n        this._throwIfDestroyed();\n        return this._node;\n      }\n\n      /** @param {?number} tabIndex */\n\n    }, {\n      key: 'savedTabIndex',\n      set: function set(tabIndex) {\n        this._throwIfDestroyed();\n        this._savedTabIndex = tabIndex;\n      }\n\n      /** @return {?number} */\n      ,\n      get: function get() {\n        this._throwIfDestroyed();\n        return this._savedTabIndex;\n      }\n    }]);\n\n    return InertNode;\n  }();\n\n  /**\n   * InertManager is a per-document singleton object which manages all inert roots and nodes.\n   *\n   * When an element becomes an inert root by having an `inert` attribute set and/or its `inert`\n   * property set to `true`, the `setInert` method creates an `InertRoot` object for the element.\n   * The `InertRoot` in turn registers itself as managing all of the element's focusable descendant\n   * nodes via the `register()` method. The `InertManager` ensures that a single `InertNode` instance\n   * is created for each such node, via the `_managedNodes` map.\n   */\n\n\n  var InertManager = function () {\n    /**\n     * @param {!Document} document\n     */\n    function InertManager(document) {\n      _classCallCheck(this, InertManager);\n\n      if (!document) {\n        throw new Error('Missing required argument; InertManager needs to wrap a document.');\n      }\n\n      /** @type {!Document} */\n      this._document = document;\n\n      /**\n       * All managed nodes known to this InertManager. In a map to allow looking up by Node.\n       * @type {!Map<!Node, !InertNode>}\n       */\n      this._managedNodes = new Map();\n\n      /**\n       * All inert roots known to this InertManager. In a map to allow looking up by Node.\n       * @type {!Map<!Node, !InertRoot>}\n       */\n      this._inertRoots = new Map();\n\n      /**\n       * Observer for mutations on `document.body`.\n       * @type {!MutationObserver}\n       */\n      this._observer = new MutationObserver(this._watchForInert.bind(this));\n\n      // Add inert style.\n      addInertStyle(document.head || document.body || document.documentElement);\n\n      // Wait for document to be loaded.\n      if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', this._onDocumentLoaded.bind(this));\n      } else {\n        this._onDocumentLoaded();\n      }\n    }\n\n    /**\n     * Set whether the given element should be an inert root or not.\n     * @param {!Element} root\n     * @param {boolean} inert\n     */\n\n\n    _createClass(InertManager, [{\n      key: 'setInert',\n      value: function setInert(root, inert) {\n        if (inert) {\n          if (this._inertRoots.has(root)) {\n            // element is already inert\n            return;\n          }\n\n          var inertRoot = new InertRoot(root, this);\n          root.setAttribute('inert', '');\n          this._inertRoots.set(root, inertRoot);\n          // If not contained in the document, it must be in a shadowRoot.\n          // Ensure inert styles are added there.\n          if (!this._document.body.contains(root)) {\n            var parent = root.parentNode;\n            while (parent) {\n              if (parent.nodeType === 11) {\n                addInertStyle(parent);\n              }\n              parent = parent.parentNode;\n            }\n          }\n        } else {\n          if (!this._inertRoots.has(root)) {\n            // element is already non-inert\n            return;\n          }\n\n          var _inertRoot = this._inertRoots.get(root);\n          _inertRoot.destructor();\n          this._inertRoots['delete'](root);\n          root.removeAttribute('inert');\n        }\n      }\n\n      /**\n       * Get the InertRoot object corresponding to the given inert root element, if any.\n       * @param {!Node} element\n       * @return {!InertRoot|undefined}\n       */\n\n    }, {\n      key: 'getInertRoot',\n      value: function getInertRoot(element) {\n        return this._inertRoots.get(element);\n      }\n\n      /**\n       * Register the given InertRoot as managing the given node.\n       * In the case where the node has a previously existing inert root, this inert root will\n       * be added to its set of inert roots.\n       * @param {!Node} node\n       * @param {!InertRoot} inertRoot\n       * @return {!InertNode} inertNode\n       */\n\n    }, {\n      key: 'register',\n      value: function register(node, inertRoot) {\n        var inertNode = this._managedNodes.get(node);\n        if (inertNode !== undefined) {\n          // node was already in an inert subtree\n          inertNode.addInertRoot(inertRoot);\n        } else {\n          inertNode = new InertNode(node, inertRoot);\n        }\n\n        this._managedNodes.set(node, inertNode);\n\n        return inertNode;\n      }\n\n      /**\n       * De-register the given InertRoot as managing the given inert node.\n       * Removes the inert root from the InertNode's set of managing inert roots, and remove the inert\n       * node from the InertManager's set of managed nodes if it is destroyed.\n       * If the node is not currently managed, this is essentially a no-op.\n       * @param {!Node} node\n       * @param {!InertRoot} inertRoot\n       * @return {?InertNode} The potentially destroyed InertNode associated with this node, if any.\n       */\n\n    }, {\n      key: 'deregister',\n      value: function deregister(node, inertRoot) {\n        var inertNode = this._managedNodes.get(node);\n        if (!inertNode) {\n          return null;\n        }\n\n        inertNode.removeInertRoot(inertRoot);\n        if (inertNode.destroyed) {\n          this._managedNodes['delete'](node);\n        }\n\n        return inertNode;\n      }\n\n      /**\n       * Callback used when document has finished loading.\n       */\n\n    }, {\n      key: '_onDocumentLoaded',\n      value: function _onDocumentLoaded() {\n        // Find all inert roots in document and make them actually inert.\n        var inertElements = slice.call(this._document.querySelectorAll('[inert]'));\n        inertElements.forEach(function (inertElement) {\n          this.setInert(inertElement, true);\n        }, this);\n\n        // Comment this out to use programmatic API only.\n        this._observer.observe(this._document.body, { attributes: true, subtree: true, childList: true });\n      }\n\n      /**\n       * Callback used when mutation observer detects attribute changes.\n       * @param {!Array<!MutationRecord>} records\n       * @param {!MutationObserver} self\n       */\n\n    }, {\n      key: '_watchForInert',\n      value: function _watchForInert(records, self) {\n        var _this = this;\n        records.forEach(function (record) {\n          switch (record.type) {\n            case 'childList':\n              slice.call(record.addedNodes).forEach(function (node) {\n                if (node.nodeType !== Node.ELEMENT_NODE) {\n                  return;\n                }\n                var inertElements = slice.call(node.querySelectorAll('[inert]'));\n                if (matches.call(node, '[inert]')) {\n                  inertElements.unshift(node);\n                }\n                inertElements.forEach(function (inertElement) {\n                  this.setInert(inertElement, true);\n                }, _this);\n              }, _this);\n              break;\n            case 'attributes':\n              if (record.attributeName !== 'inert') {\n                return;\n              }\n              var target = /** @type {!Element} */record.target;\n              var inert = target.hasAttribute('inert');\n              _this.setInert(target, inert);\n              break;\n          }\n        }, this);\n      }\n    }]);\n\n    return InertManager;\n  }();\n\n  /**\n   * Recursively walk the composed tree from |node|.\n   * @param {!Node} node\n   * @param {(function (!Element))=} callback Callback to be called for each element traversed,\n   *     before descending into child nodes.\n   * @param {?ShadowRoot=} shadowRootAncestor The nearest ShadowRoot ancestor, if any.\n   */\n\n\n  function composedTreeWalk(node, callback, shadowRootAncestor) {\n    if (node.nodeType == Node.ELEMENT_NODE) {\n      var element = /** @type {!Element} */node;\n      if (callback) {\n        callback(element);\n      }\n\n      // Descend into node:\n      // If it has a ShadowRoot, ignore all child elements - these will be picked\n      // up by the <content> or <shadow> elements. Descend straight into the\n      // ShadowRoot.\n      var shadowRoot = /** @type {!HTMLElement} */element.shadowRoot;\n      if (shadowRoot) {\n        composedTreeWalk(shadowRoot, callback, shadowRoot);\n        return;\n      }\n\n      // If it is a <content> element, descend into distributed elements - these\n      // are elements from outside the shadow root which are rendered inside the\n      // shadow DOM.\n      if (element.localName == 'content') {\n        var content = /** @type {!HTMLContentElement} */element;\n        // Verifies if ShadowDom v0 is supported.\n        var distributedNodes = content.getDistributedNodes ? content.getDistributedNodes() : [];\n        for (var i = 0; i < distributedNodes.length; i++) {\n          composedTreeWalk(distributedNodes[i], callback, shadowRootAncestor);\n        }\n        return;\n      }\n\n      // If it is a <slot> element, descend into assigned nodes - these\n      // are elements from outside the shadow root which are rendered inside the\n      // shadow DOM.\n      if (element.localName == 'slot') {\n        var slot = /** @type {!HTMLSlotElement} */element;\n        // Verify if ShadowDom v1 is supported.\n        var _distributedNodes = slot.assignedNodes ? slot.assignedNodes({ flatten: true }) : [];\n        for (var _i = 0; _i < _distributedNodes.length; _i++) {\n          composedTreeWalk(_distributedNodes[_i], callback, shadowRootAncestor);\n        }\n        return;\n      }\n    }\n\n    // If it is neither the parent of a ShadowRoot, a <content> element, a <slot>\n    // element, nor a <shadow> element recurse normally.\n    var child = node.firstChild;\n    while (child != null) {\n      composedTreeWalk(child, callback, shadowRootAncestor);\n      child = child.nextSibling;\n    }\n  }\n\n  /**\n   * Adds a style element to the node containing the inert specific styles\n   * @param {!Node} node\n   */\n  function addInertStyle(node) {\n    if (node.querySelector('style#inert-style')) {\n      return;\n    }\n    var style = document.createElement('style');\n    style.setAttribute('id', 'inert-style');\n    style.textContent = '\\n' + '[inert] {\\n' + '  pointer-events: none;\\n' + '  cursor: default;\\n' + '}\\n' + '\\n' + '[inert], [inert] * {\\n' + '  user-select: none;\\n' + '  -webkit-user-select: none;\\n' + '  -moz-user-select: none;\\n' + '  -ms-user-select: none;\\n' + '}\\n';\n    node.appendChild(style);\n  }\n\n  /** @type {!InertManager} */\n  var inertManager = new InertManager(document);\n\n  if (!Element.prototype.hasOwnProperty('inert')) {\n    Object.defineProperty(Element.prototype, 'inert', {\n      enumerable: true,\n      /** @this {!Element} */\n      get: function get() {\n        return this.hasAttribute('inert');\n      },\n      /** @this {!Element} */\n      set: function set(inert) {\n        inertManager.setInert(this, inert);\n      }\n    });\n  }\n\n})));\n"],"sourceRoot":""}